#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cr-setup:server');
var http = require('http');
var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Socket setup & pass server
var io = socket(server);
io.on('connection', (socket) => {

    console.log('made socket connection', socket.id);

    const record = require('node-record-lpcm16');
    // Handle chat event
    socket.on('rec', function(configData){
        
        // [START speech_streaming_mic_recognize]
        // const record = require('node-record-lpcm16');
        
        // Imports the Google Cloud client library
        const speech = require('@google-cloud/speech');

        // Creates a client
        const client = new speech.SpeechClient();

        /**
         * TODO(developer): Uncomment the following lines before running the sample.
         */
        // const encoding = 'Encoding of the audio file, e.g. LINEAR16';
        // const sampleRateHertz = 16000;
        // const languageCode = 'BCP-47 language code, e.g. en-US';

        const request = {
          config: {
            encoding: configData.encoding,
            sampleRateHertz: configData.sampleRateHertz,
            languageCode: configData.languageCode,
          },
          interimResults: true // If you want interim results, set this to true
        };

        // Create a recognize stream
        const recognizeStream = client
          .streamingRecognize(request)
          .on('error', console.error)
          .on('data', data => {
            // process.stdout.write(
            if (data.results[0] && data.results[0].alternatives[0]) {
              io.sockets.emit('rec', {
                transcript: data.results[0].alternatives[0].transcript,
                isFinal: data.results[0].isFinal
              });
              console.log(data.results[0].alternatives[0].transcript, data.results[0].isFinal);
            } else {
              console.log('Transcription has stopped');
            }
          });
        
        // Start recording and send the microphone input to the Speech API
        console.log('Listening, press Ctrl+C to stop.', socket.id);
        record
          .start({
            sampleRateHertz: configData.sampleRateHertz,
            threshold: 0,
            // Other options, see https://www.npmjs.com/package/node-record-lpcm16#options
            verbose: false,
            recordProgram: 'rec', // Try also "arecord" or "sox"
            silence: '1.0',
          })
          .on('error', console.error)
          .pipe(recognizeStream);

        setTimeout(record.stop, 64000);

        // [END speech_streaming_mic_recognize]
    });

    socket.on('disconnect', () => {
      record.stop();
      console.log('lost socket connection', socket.id);
    });

});